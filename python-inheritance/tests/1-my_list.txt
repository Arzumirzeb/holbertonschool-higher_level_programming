================
MyList test file
================

 
>>> MyList = __import__('1-my_list').MyList
>>> my_list = MyList()
>>> type(my_list)
<class '1-my_list.MyList'>


>>> print(my_list)
[]

>>> my_list = MyList([1, 2, 3])
>>> print(my_list)
[1, 2, 3]

>>> my_list = MyList([1, 2], [3, 4])
Traceback (most recent call last):
...
TypeError: list() takes at most 1 argument (2 given)

>>> my_list = MyList(None)
Traceback (most recent call last):
...
TypeError: 'NoneType' object is not iterable

>>> my_list = MyList()
>>> my_list.append(7)
>>> my_list.append(4)
>>> my_list.append(5)
>>> print(my_list)
[7, 4, 5]

>>> my_list[1] = 6
>>> print(my_list)
[7, 6, 5]

>>> my_list = MyList()
>>> print(my_list.print_sorted)
<bound method MyList.print_sorted of []>

>>> my_list.print_sorted(7)
Traceback (most recent call last):
...
TypeError: print_sorted() takes 1 positional argument but 2 were given


>>> my_list.append(1)
>>> my_list.append(7)
>>> my_list.append(8)
>>> my_list.append(2)
>>> print(mylist)
[1, 7, 8, 2]

>>> my_list.print_sorted()
[1, 2, 7, 8]

>>> my_list.print_sorted(1)
Traceback (most recent call last):
TypeError: print_sorted() takes 1 positional argument but 2 were given
